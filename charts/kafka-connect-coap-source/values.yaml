# Basic info
replicaCount: 1

image:
  repository: registry.hub.docker.com/datamountaineer/kafka-connect-coap
  tag: 1.0.1
  pullPolicy: IfNotPresent

# Resource management
resources:
  limits:
    memory: 512Mi
  requests:
    memory: 256Mi

# Monitoring
monitoring:
  pipeline: "__REQUIRED__"
  enabled: true
  port: 9102
  path: "/metrics"

# lenses 
lensesUser: ""

# kafka ssl
# The key and truststores base64 encoded contents
# and added to the kafka secret and mounted into /etc/landoop/kafka-security
kafka:
  securityProtocol:
  ssl:
    enabled: false
    trustStoreFileData:
    trustStorePassword:
    keyStoreFileData:
    keyStorePassword:
  sasl:
    enabled: false
    # keyTabData is the base64 enecode contents kerberos keytable is using kerberos
    keyTabData:    
    # jaasFileData is the base64 encoded contents of the kafka jaas file
    jaasFileData: 
    #GSSAP, SCRAM or PLAIN
    mechanism:  

# Connect values
  # javaHeap options    
javaHeap: 256M

# clusterName The connect cluster name. This is the consumer group id for the backing topics
clusterName: "__REQUIRED__"

# bootstrapServers A comma separated list of the kafka brokers
bootstrapServers: kafka:9092

# schemaRegistryURL A comman separated list of the Schema registry URL
schemaRegistryURL: "http://schema-registry:8081"

# restPort The rest port of Connect
restPort: 8083

# logLevel The log4j level
logLevel: INFO

# keyConverter The key converter to/from Connects struct
keyConverter: "io.confluent.connect.avro.AvroConverter"

# valueConverter The key converter to/from Connects struct
valueConveter: "io.confluent.connect.avro.AvroConverter"

# connectorClass
connectorClass: "com.datamountaineer.streamreactor.connect.coap.source.CoapSourceConnector"

# applicationId name of the connector
applicationId: "__REQUIRED__"

# maxTasks The number of tasks to spawn
maxTasks: 1

# kcql The KCQL statement to select and route resources to topics. type: STRING importance: HIGH
kcql: "__REQUIRED__"

# batchSize The number of events to take from the internal queue to batch together to send to Kafka. The records willbe flushed if the linger period has expired first. type: INT importance: MEDIUM
batchSize: 100

# lingerMs The number of milliseconds to wait before flushing the received messages to Kafka. The records willbe flushed if the batch size is reached before the linger period has expired. type: INT importance: MEDIUM
lingerMs: 5000

# enabled Enables the output for how many records have been processed type: BOOLEAN importance: MEDIUM
progressEnabled: true

# host The hostname the DTLS connector will bind to on the Connector host. type: STRING importance: LOW
host: localhost

# port The port the DTLS connector will bind to on the Connector host. type: INT importance: LOW
port: 0

# uri The COAP server to connect to. type: STRING importance: HIGH
uri: localhost

# username CoAP PSK identity. type: STRING importance: LOW
username: 

# password CoAP PSK secret key in the secret
password: "__REQUIRED__"

# publicKeyFileData is the base64 encoded publicKey data
# This put in a config map and mounted as /etc/landoop/certs/public-key.pem 
privateKeyFileData:

#  Path to the private key file data base64 encoded for use in with PSK credentials in PKCS8 rather than PKCS1
#  Use open SSL to convert.
# 
#  `openssl pkcs8 -in privatekey.pem -topk8 -nocrypt -out privatekey-pkcs8.pem`
# 
#  Only cipher suites TLS_PSK_WITH_AES_128_CCM_8 and TLS_PSK_WITH_AES_128_CBC_SHA256 are currently supported.
#      type: STRING importance: LOW
# privateKeyFileData is the based64 encoded private key data. 
# This put in a config map and mounted as /etc/landoop/certs/private-key.pem 
privateKeyFileData: 

# sslEnabled enables ssl mounts
sslEnabled: false

# truststorePassKey The password  key of the trust store in the secret
trustStorePass:

# trustStoreFileData is the base64 contents of the truststore file
trustStoreFileData:

# keystorePassKey The password key of the key store in the secret
keyStorePass:

# keyStoreFileData is the base64 contents of the keystore file
keyStoreFileData:

# certChainKey The key to use to get the certificate chain. type: STRING importance: LOW
certChainKey: client

# certs
certs: 

