# Basic info
replicaCount: "__REQUIRED__"
secretsRef: "__REQUIRED__"
image:
  repository: registry.hub.docker.com/datamountaineer/kafka-connect-ftp-source
  tag: 0.3.0
  pullPolicy: IfNotPresent

# Resource management
resources:
  limits:
    memory: 512Mi
  requests:
    memory: 256Mi
javaHeap: 256M

# Monitoring
monitoring:
  pipeline: "__REQUIRED__"
  enabled: true
  port: 9102
  path: "/metrics"

# SSL/TLS options can be enabled, some connectors provide SSL support, others the newer TLS
# Set the corresponding value type to true. For SSL persistent volumes or hostPaths will be
# mounted under /connector-extra-config. Set the connectors ssl/tls option paths to be use this
# TLS is done via Secrets, create a secret for containing the certificates (base64 encoded) and
# create a secret for them, adding the name of the secret to the `secretsRef` other wise if using
# Eneco's Landscaper it will do this for you.

# SSL mount path on hosts, should be the base path of any ssl keystore/truststore paths
ssl:
  enabled: false
  # Path to the directory on the hosts
  path: /ssl

  # If persistent volumes should be used for ssl keystore/truststore paths
  persistentVolumes:
    enable: false
    existingClaim:

# TLS, for those connectors supporting TLS certificates rather than ssl key/truststores
# contents for mount take from config map
tls:
  enabled: false

## Avro schemas, for those connectors, MQTT and JMS source that support Avro converters we
## need the schemas, so we'll mount as a ConfigMap. Set the key value pairs, filename and data
## matching the value option avroSchema. Key is the file name, value is the avro schema contents
#avroSchemaFiles:
#  schema_file_name:  ""






# ftpMaxPollRecords Max number of records returned per poll type: INT importance: LOW
ftpMaxPollRecords: 10000

# ftpSourcerecordconverter TODO type: CLASS importance: HIGH
ftpSourcerecordconverter: com.datamountaineer.streamreactor.connect.ftp.source.NopSourceRecordConverter

# ftpAddress ftp address[:port] type: STRING importance: HIGH
ftpAddress: "__REQUIRED__"

# ftpRefresh how often the ftp server is polled; ISO8601 duration type: STRING importance: HIGH
ftpRefresh: "__REQUIRED__"

# ftpPassword ftp password to login type: PASSWORD importance: HIGH
ftpPassword: "__REQUIRED__"

# ftpFileMaxage ignore files older than this; ISO8601 duration type: STRING importance: HIGH
ftpFileMaxage: "__REQUIRED__"

# ftpMonitorTail comma separated lists of path:destinationtopic; tail of file is tracked type: LIST importance: HIGH
ftpMonitorTail: 

# ftpKeystyle what the output key is set to: `string` => filename; `struct` => structure with filename and offset type: STRING importance: HIGH
ftpKeystyle: "__REQUIRED__"

# ftpMonitorUpdate comma separated lists of path:destinationtopic; whole file is tracked type: LIST importance: HIGH
ftpMonitorUpdate: 

# ftpMaxBackoff on failure, exponentially backoff to at most this ISO8601 duration type: STRING importance: HIGH
ftpMaxBackoff: PT30M

# ftpUser ftp user name to login type: STRING importance: HIGH
ftpUser: "__REQUIRED__"

# ftpFileconverter TODO type: CLASS importance: HIGH
ftpFileconverter: com.datamountaineer.streamreactor.connect.ftp.source.SimpleFileConverter

